"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const network_1 = require("../../base/network");
class EncodeCommand extends network_1.NetworkCommand {
    async run() {
        const { args, flags } = this.parse(EncodeCommand);
        let networkUrl;
        try {
            networkUrl = this.getNetworkUrl(flags);
            const { abi, methodCall } = args;
            const { encode } = await Promise.resolve().then(() => __importStar(require('../../helpers/encode')));
            const result = encode(abi, methodCall, networkUrl);
            this.log(result);
        }
        catch (e) {
            this.error(e.message, { exit: 1 });
        }
    }
}
exports.default = EncodeCommand;
EncodeCommand.description = `Encode the ABI for the method <methodCall> and print the ABI byte code.`;
EncodeCommand.flags = Object.assign({}, network_1.NetworkCommand.flags);
EncodeCommand.args = [
    {
        name: 'abi',
        required: true,
        description: 'The abi file.',
    },
    {
        name: 'methodCall',
        required: true,
        description: `e.g.: 'myMethod(arg1,arg2,["a","b",3,["d","0x123..."]])'`,
    },
];
EncodeCommand.examples = [
    `eth method:encode --sokol ./test/files/contracts/Proxy.abi 'updateAppInstance()'`,
];
